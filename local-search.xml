<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>参与项目汇总</title>
    <link href="/2025/01/28/%E5%8F%82%E4%B8%8E%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
    <url>/2025/01/28/%E5%8F%82%E4%B8%8E%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="程序设计范式课程项目"><a href="#程序设计范式课程项目" class="headerlink" title="程序设计范式课程项目"></a>程序设计范式课程项目</h3><p>项目简介：程序设计范式的期末项目，用C++和UE5而制作的原创游戏Mana-Tower，十分有趣。</p><p>项目链接：<a href="https://github.com/IcySugar000/Mana-Tower">IcySugar000&#x2F;Mana-Tower: Mana Tower, Mana Power! (github.com)</a></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="专业实习（恒生电子训练营）课程项目"><a href="#专业实习（恒生电子训练营）课程项目" class="headerlink" title="专业实习（恒生电子训练营）课程项目"></a>专业实习（恒生电子训练营）课程项目</h3><p>项目简介：恒生电子训练营的项目，后端使用Spring Boot和Mybatis，但可惜前端未能完成。</p><p>项目链接：<a href="https://gitee.com/AngelaGYY/tlfs">TLFS: TongLi Financial System (gitee.com)</a></p><h3 id="软件工程课程设计项目"><a href="#软件工程课程设计项目" class="headerlink" title="软件工程课程设计项目"></a>软件工程课程设计项目</h3><p>项目简介：软件工程的课程设计项目，运用了在恒生电子训练营学到的基金业务知识，并使用了微服务架构。后端使用Spring Cloud、Mybatis Plus等，前端使用Vue3，是一个较为完善的项目，但是也有着较强的可扩展新。</p><p>项目链接：<a href="https://github.com/JLQusername/fund-trading-system">JLQusername&#x2F;fund-trading-system: 同济大学软件工程大三课程项目，基于微服务架构的基金销售系统 (github.com)</a></p><h3 id="文件管理工具项目"><a href="#文件管理工具项目" class="headerlink" title="文件管理工具项目"></a>文件管理工具项目</h3><p>项目简介：在大三上学期的课余时间，想要练习一下Java中的文件IO相关内容，因此做了这个项目，主要起到练习作用。</p><p>项目链接：<a href="https://github.com/JLQusername/FileManagementTool">JLQusername&#x2F;FileManagementTool (github.com)</a></p><h2 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h2><h3 id="数据库课程设计"><a href="#数据库课程设计" class="headerlink" title="数据库课程设计"></a>数据库课程设计</h3><p>项目简介：数据库课程设计项目，后端被要求使用C#，数据库被要求使用Oracle，前端选用了Vue3框架，虽然较为完善，但是后端代码可以改进的地方很多，整个项目的业务逻辑也过于简单。</p><p>项目链接：<a href="https://github.com/Haookok/FlowersWhispering">Haookok&#x2F;FlowersWhispering: Database course design for the second semester of the sophomore year in 2024, School of Software, Tongji University (github.com)</a></p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>项目简介：在大三上学期的课余时间，想要练习一下前端，因此做了这个项目，使用了Nuxt3、UnoCss、MongoDB等，主要起到练习作用。</p><p>项目链接：<a href="https://github.com/JLQusername/WriteAPersonalBlog">JLQusername&#x2F;WriteAPersonalBlog (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>参与项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目经历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell基础编程学习</title>
    <link href="/2024/12/16/Shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/12/16/Shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h2><p>定义变量时，变量名不加美元符号，<strong>变量名和等号之间不能有空格</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;b907&quot;<br></code></pre></td></tr></table></figure><p>变量名的命名须遵循如下规则：</p><ul><li>只包含数字、字母和下划线</li><li>不能以数字开头</li><li>避免使用Shell关键字</li><li>使用大写字母表示常量</li><li>避免使用空格</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">FLOWER=&quot;www.flowertea.site&quot;<br>LD_LIBRARY_PATH=&quot;/bin/&quot;<br>_var=&quot;123&quot;<br>var2=&quot;abc&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">错误示例：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">避免使用<span class="hljs-keyword">if</span>作为变量名</span><br>if=&quot;some_value&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">避免使用 $ 等特殊符号</span><br><span class="hljs-meta prompt_">variable_with_$</span><span class="language-bash">=42</span><br>?var=123<br>user*name=bbb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">避免空格</span><br>variable with space=&quot;value&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">有可能会导致错误</span><br>variable_name = value<br></code></pre></td></tr></table></figure><p>除了显式地直接赋值，还可以用语句给变量赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">for file in `ls /etc`<br>或<br>for file in $(ls /etc)<br></code></pre></td></tr></table></figure><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;b907&quot;<br>echo $your_name<br>echo $&#123;your_name&#125;<br></code></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，<strong>推荐给所有变量加上花括号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">for skill in Ada Coffe Action Java; do<br>    echo &quot;I am good at $&#123;skill&#125;Script&quot;<br>done<br></code></pre></td></tr></table></figure><p>如果不给skill变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空）</p><p>已定义的变量，可以被重新定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;b907&quot;<br>echo $your_name<br>your_name=&quot;flowertea&quot;<br>echo $your_name<br></code></pre></td></tr></table></figure><p>第二次赋值的时候不能写<code>$your_name=&quot;flowertea&quot;</code>，使用变量的时候才加美元符（$）</p><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用 <code>readonly </code>命令可以将变量定义为只读变量，只读变量的值不能被改变</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>myUrl=&quot;https://www.google.com&quot;<br>readonly myUrl<br>myUrl=&quot;https://www.flowertea.site&quot;<br></code></pre></td></tr></table></figure><p>运行脚本，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">/bin/sh: NAME: This variable is read only.<br></code></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>使用 <code>unset</code> 命令可以删除变量，变量被删除后不能再次使用，<code>unset </code>命令不能删除只读变量</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>一些主要的类型包括：</p><h4 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h4><p>在 Shell中，变量通常被视为字符串，最常用最有用的数据类型，可以使用单引号 <strong>‘</strong> 或双引号 <strong>“</strong> 来定义字符串</p><p>字符串可以用单引号，也可以用双引号，也可以不用引号</p><h5 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">str=&#x27;this is a string&#x27;<br></code></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的（字符串拼接除外）</li><li>单引号字符串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用</li></ul><h5 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;b907&quot;<br>str=&quot;Hello, I know you are \&quot;$your_name\&quot;! \n&quot;<br>echo -e $str<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hello, I know you are &quot;b907&quot;! <br></code></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;flower&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用双引号拼接</span><br>greeting=&quot;hello, &quot;$your_name&quot; !&quot;<br>greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;<br>echo $greeting  $greeting_1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用单引号拼接</span><br>greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;<br>greeting_3=&#x27;hello, $&#123;your_name&#125; !&#x27;<br>echo $greeting_2  $greeting_3<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hello, flower ! hello, flower !<br>hello, flower ! hello, $&#123;your_name&#125; !<br></code></pre></td></tr></table></figure><h5 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;abcd&quot;<br>echo $&#123;#string&#125;   # 输出 4<br></code></pre></td></tr></table></figure><p>变量为字符串时，<code>$&#123;#string&#125;</code> 等价于 <code>$&#123;#string[0]&#125;</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;abcd&quot;<br>echo $&#123;#string[0]&#125;   # 输出 4<br></code></pre></td></tr></table></figure><h5 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h5><p>从字符串第 2 个字符开始截取 4 个字符：（第一个字符的索引值为0）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;flower is a great site&quot;<br>echo $&#123;string:1:4&#125; # 输出 lowe<br></code></pre></td></tr></table></figure><h5 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h5><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">string=&quot;flower is a great site&quot;<br>echo `expr index &quot;$string&quot; io`  # 输出 3<br></code></pre></td></tr></table></figure><h4 id="整数变量"><a href="#整数变量" class="headerlink" title="整数变量"></a>整数变量</h4><p>在一些Shell中，可以使用 <code>declare</code> 或 <code>typeset</code> 命令来声明整数变量，这样的变量只包含整数值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">declare -i my_integer=42<br></code></pre></td></tr></table></figure><p>这样的声明告诉 Shell 将 my_integer 视为整数，如果尝试将非整数值赋给它，Shell会尝试将其转换为整数</p><h4 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h4><p>Shell 也支持数组，允许在一个变量中存储多个值，bash支持一维数组（不支持多维数组），并且没有限定数组的大小</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0</p><p>数组可以是整数索引数组或关联数组，以下是一个简单的整数索引数组的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">my_array=(1 2 3 4 5)<br></code></pre></td></tr></table></figure><p>或者关联数组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">declare -A associative_array<br>associative_array[&quot;name&quot;]=&quot;B907&quot;<br>associative_array[&quot;age&quot;]=30<br></code></pre></td></tr></table></figure><h5 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h5><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：<code>array_name=(value0 value1 value2 value3)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name=(value0 value1 value2 value3)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>array_name=(<br>value0<br>value1<br>value2<br>value3<br>)<br></code></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量：（可以不使用连续的下标，而且下标的范围没有限制）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name[0]=value0<br>array_name[1]=value1<br>array_name[n]=valuen<br></code></pre></td></tr></table></figure><h5 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h5><p>Bash 支持关联数组，可以使用任意的字符串、或者整数作为下标来访问数组元素，关联数组使用 <code>declare</code>命令来声明，语法格式为<code>declare -A array_name</code>,<code>-A</code> 选项就是用于声明一个关联数组，关联数组的键是唯一的</p><p>创建一个关联数组 <strong>site</strong>，并创建不同的键值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A site=([&quot;google&quot;]=&quot;www.google.com&quot; [&quot;flowertea&quot;]=&quot;www.flowertea.site&quot; [&quot;taobao&quot;]=&quot;www.taobao.com&quot;)<br></code></pre></td></tr></table></figure><p>也可以先声明一个关联数组，然后再设置键和值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A site<br>site[&quot;google&quot;]=&quot;www.google.com&quot;<br>site[&quot;flowertea&quot;]=&quot;www.flowertea.site&quot;<br>site[&quot;taobao&quot;]=&quot;www.taobao.com&quot;<br></code></pre></td></tr></table></figure><p>访问关联数组元素可以使用指定的键，格式为<code>array_name[&quot;index&quot;]</code></p><h5 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h5><p>读取数组元素值的一般格式是：<code>$&#123;数组名[下标]&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">valuen=$&#123;array_name[n]&#125;<br></code></pre></td></tr></table></figure><p>使用 @ 或 * 可以获取数组中的所有元素，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><br>echo &quot;数组的元素为: $&#123;my_array[*]&#125;&quot;<br>echo &quot;数组的元素为: $&#123;my_array[@]&#125;&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh</span><br>数组的元素为: A B C D<br>数组的元素为: A B C D<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A site<br>site[&quot;google&quot;]=&quot;www.google.com&quot;<br>site[&quot;flowertea&quot;]=&quot;www.flowertea.site&quot;<br>site[&quot;taobao&quot;]=&quot;www.taobao.com&quot;<br><br>echo &quot;数组的元素为: $&#123;site[*]&#125;&quot;<br>echo &quot;数组的元素为: $&#123;site[@]&#125;&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh</span><br>数组的元素为: www.google.com www.flowertea.site www.taobao.com<br>数组的元素为: www.google.com www.flowertea.site www.taobao.com<br></code></pre></td></tr></table></figure><p>在数组前加一个感叹号 ! 可以获取数组的所有键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A site<br>site[&quot;google&quot;]=&quot;www.google.com&quot;<br>site[&quot;flowertea&quot;]=&quot;www.flowertea.site&quot;<br>site[&quot;taobao&quot;]=&quot;www.taobao.com&quot;<br><br>echo &quot;数组的键为: $&#123;!site[*]&#125;&quot;<br>echo &quot;数组的键为: $&#123;!site[@]&#125;&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">数组的键为: google flowertea taobao<br>数组的键为: google flowertea taobao<br></code></pre></td></tr></table></figure><h5 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h5><p>方法与获取字符串长度的方法相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span><br>length=$&#123;#array_name[@]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>length=$&#123;#array_name[*]&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span><br>length=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>由操作系统或用户设置的特殊变量，用于配置 Shell 的行为和影响其执行环境，如 PATH 变量包含了操作系统搜索可执行文件的路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">echo $PATH<br></code></pre></td></tr></table></figure><h4 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h4><p>有一些特殊变量在 Shell 中具有特殊含义，例如 <code>$0</code> 表示脚本的名称，<code>$1</code>, <code>$2</code>, 等表示脚本的参数，<code>$#</code>表示传递给脚本的参数数量，<code>$?</code> 表示上一个命令的退出状态等</p><h3 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a>Shell 注释</h3><p>以 # 开头的行就是注释，会被解释器忽略，通过每一行加一个 # 号设置多行注释</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果</p><p>多行注释还可以使用以下格式（使用 Here 文档）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">:&lt;&lt;EOF<br>注释内容...<br>注释内容...<br>注释内容...<br>EOF<br></code></pre></td></tr></table></figure><p>以上例子中，: 是一个空命令，用于执行后面的 Here 文档，<code>&lt;&lt;&#39;EOF&#39; </code>表示开启 Here 文档，<code>COMMENT</code> 是 Here 文档的标识符，在这两个标识符之间的内容都会被视为注释，不会被执行</p><p>EOF 也可以使用其他符号:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">: &lt;&lt;&#x27;COMMENT&#x27;<br>这是注释的部分。<br>可以有多行内容。<br>COMMENT<br><br>:&lt;&lt;&#x27;<br>注释内容...<br>注释内容...<br>注释内容...<br>&#x27;<br><br>:&lt;&lt;!<br>注释内容...<br>注释内容...<br>注释内容...<br>!<br></code></pre></td></tr></table></figure><p>我们也可以使用了冒号 <strong>:</strong> 命令，并用单引号 <strong>‘</strong> 将多行内容括起来</p><p>由于冒号是一个空命令，这些内容不会被执行，格式为：<code>: + 空格 + 单引号</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">: &#x27;<br>这是注释的部分。<br>可以有多行内容。<br>&#x27;<br></code></pre></td></tr></table></figure><h2 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h2><p>可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为 <code>$n</code>，n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数。</p><p>例如可以使用 <code>$1、$2</code> 等来引用传递给脚本的参数，其中 <code>$1</code> 表示第一个参数，<code>$2</code> 表示第二个参数，依此类推（<code>$&#123;11&#125;</code> 表示第一个参数）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;执行的文件名：$0&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br>echo &quot;第二个参数为：$2&quot;;<br>echo &quot;第三个参数为：$3&quot;;<br></code></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span><br>Shell 传递参数实例！<br>执行的文件名：./test.sh<br>第一个参数为：1<br>第二个参数为：2<br>第三个参数为：3<br></code></pre></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。如<code>$*</code>加上双引号，以<code>&quot;$1 $2 … $n&quot;</code>（字符串）的形式输出所有参数</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。如<code>$@</code>加上双引号，以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> （数组）的形式输出所有参数</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<code>set</code>命令功能相同</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态，0表示没有错误，其他任何值表明有错误</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br><br>echo &quot;参数个数为：$#&quot;;<br>echo &quot;传递的参数作为一个字符串显示：$*&quot;;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span><br>Shell 传递参数实例！<br>第一个参数为：1<br>参数个数为：3<br>传递的参数作为一个字符串显示：1 2 3<br></code></pre></td></tr></table></figure><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，则 “$*” 等价于 “1 2 3”（传递了一个参数），而 “$@” 等价于 “1” “2” “3”（传递了三个参数）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>echo &quot;-- \$* 演示 ---&quot;<br>for i in &quot;$*&quot;; do<br>    echo $i<br>done<br><br>echo &quot;-- \$@ 演示 ---&quot;<br>for i in &quot;$@&quot;; do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span><br>-- $* 演示 ---<br>1 2 3<br>-- $@ 演示 ---<br>1<br>2<br>3<br></code></pre></td></tr></table></figure><h2 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h2><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，<code>expr</code> 最常用</p><p><code>expr</code> 是一款表达式计算工具，使用它能完成表达式的求值操作，例如，两个数相加(注意使用的是反引号，而不是单引号 )：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>val=`expr 2 + 2`<br>echo &quot;两数之和为 : $val&quot;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><strong>表达式和运算符之间要有空格</strong>，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样</li><li>完整的表达式要被反引号包含，这个字符不是常用的单引号，在 <code>Esc 键</code>下边</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0</td></tr><tr><td align="left">&#x3D;</td><td align="left">赋值</td><td align="left"><code>a=$b</code> 把变量 b 的值赋给 a</td></tr><tr><td align="left">&#x3D;&#x3D;</td><td align="left">相等，用于比较两个数字，相同则返回 true</td><td align="left"><code>[ $a == $b ]</code> 返回 false</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等，用于比较两个数字，不相同则返回 true</td><td align="left"><code>[ $a != $b ]</code> 返回 true</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><p>条件表达式要放在方括号之间，并且要有空格，例如: <code>[$a==$b]</code> 是错误的，必须写成 <code>[ $a == $b ]</code></p></li><li><p>乘号<code>*</code>前边必须加反斜杠<code>\</code>才能实现乘法运算</p></li><li><p><code>if...then...fi</code> 是条件语句</p></li><li><p>在 MAC 中 shell 的 <code>expr</code> 语法是：<code>$((表达式))</code>，此处表达式中的<code>*</code>不需要转义符号 <code>\</code></p></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left"><code>-eq</code></td><td align="left">检测两个数是否相等，相等返回 true</td><td align="left"><code>[ $a -eq $b ] </code>返回 false</td></tr><tr><td align="left"><code>-ne</code></td><td align="left">检测两个数是否不相等，不相等返回 true</td><td align="left"><code>[ $a -ne $b ] </code>返回 true</td></tr><tr><td align="left"><code>-gt</code></td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true</td><td align="left"><code>[ $a -gt $b ] </code>返回 false</td></tr><tr><td align="left"><code>-lt</code></td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true</td><td align="left"><code>[ $a -lt $b ]</code> 返回 true</td></tr><tr><td align="left"><code>-ge</code></td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true</td><td align="left"><code>[ $a -ge $b ]</code> 返回 false</td></tr><tr><td align="left"><code>-le</code></td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true</td><td align="left"><code>[ $a -le $b ]</code> 返回 true</td></tr></tbody></table><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true</td><td align="left"><code>[ ! false ] </code>返回 true</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true</td><td align="left"><code>[ $a -lt 20 -o $b -gt 100 ] </code>返回 true</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true</td><td align="left"><code>[ $a -lt 20 -a $b -gt 100 ]</code>返回 false</td></tr></tbody></table><p><strong>注意：实际使用<code>!</code>时，遇到了一些问题，使用时需要多加小心</strong></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left"><code>&amp;&amp;</code></td><td align="left">逻辑的 AND</td><td align="left"><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] </code>返回 false</td></tr><tr><td align="left">&#96;</td><td align="left"></td><td align="left">&#96;</td></tr></tbody></table><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 <code>&quot;abc&quot;</code>，变量 b 为 <code>&quot;efg&quot;</code>：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">检测两个字符串是否相等，相等返回 true</td><td align="left">[ $a &#x3D; $b ] 返回 false</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检测两个字符串是否不相等，不相等返回 true</td><td align="left">[ $a !&#x3D; $b ] 返回 true</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true</td><td align="left">[ -z $a ] 返回 false</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true</td><td align="left">[ -n “$a” ] 返回 true</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否不为空，不为空返回 true</td><td align="left">[ $a ] 返回 true</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性，属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true</td><td align="left">[ -b $file ] 返回 false</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true</td><td align="left">[ -c $file ] 返回 false</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true</td><td align="left">[ -d $file ] 返回 false</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true</td><td align="left">[ -f $file ] 返回 true</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 <code>SGID 位</code>，如果是，则返回 true</td><td align="left">[ -g $file ] 返回 false</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了<code>粘着位(Sticky Bit)</code>，如果是，则返回 true</td><td align="left">[ -k $file ] 返回 false</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true</td><td align="left">[ -p $file ] 返回 false</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 <code>SUID 位</code>，如果是，则返回 true</td><td align="left">[ -u $file ] 返回 false</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true</td><td align="left">[ -r $file ] 返回 true</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true</td><td align="left">[ -w $file ] 返回 true</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true</td><td align="left">[ -x $file ] 返回 true</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true</td><td align="left">[ -s $file ] 返回 true</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true</td><td align="left">[ -e $file ] 返回 true</td></tr></tbody></table><p>其他检查符：</p><ul><li><code>-S</code>: 判断某文件是否 socket</li><li><code>-L</code>: 检测文件是否存在并且是一个符号链接</li></ul><h3 id="自增和自减操作符"><a href="#自增和自减操作符" class="headerlink" title="自增和自减操作符"></a>自增和自减操作符</h3><p>尽管 Shell 本身没有像 C、C++ 或 Java 那样的 ++ 和 – 操作符，但可以通过其他方式实现相同的功能，以下是一些常见的方法：</p><p><code>let 命令</code>允许对整数进行算术运算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化变量</span><br>num=5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自增</span><br>let num++<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自减</span><br>let num--<br>echo $num<br></code></pre></td></tr></table></figure><p><code>$(( )) 语法</code> 也是进行算术运算的一种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化变量</span><br>num=5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自增</span><br>num=$((num + 1)) # num=$[num + 1]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自减</span><br>num=$((num - 1)) # num=$[num - 1]<br>echo $num<br></code></pre></td></tr></table></figure><p><code>expr</code> 命令可以用于算术运算，但在现代脚本中不如 <code>let</code> 和 <code>$(( ))</code> 常用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化变量</span><br>num=5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自增</span><br>num=$(expr $num + 1) # num=`expr $num + 1`<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自减</span><br>num=$(expr $num - 1) # num=`expr $num - 1`<br>echo $num<br></code></pre></td></tr></table></figure><h2 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a>Shell echo命令</h2><p>Shell 的 echo 指令用于字符串的输出，命令格式：<code>echo string</code>，可以使用echo实现更复杂的输出格式控制</p><h3 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo It is a test<br></code></pre></td></tr></table></figure><h3 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;\&quot;It is a test\&quot;&quot;<br></code></pre></td></tr></table></figure><p>结果为<code>&quot;It is a test&quot;</code>，同样，双引号也可以省略</p><h3 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h3><p><code>read 命令</code>从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>read name <br>echo &quot;$name It is a test&quot;<br></code></pre></td></tr></table></figure><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@www ~]# sh test.sh<br>OK                     #标准输入<br>OK It is a test        #输出<br></code></pre></td></tr></table></figure><h3 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;OK! \n&quot; # -e 开启转义<br>echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">OK!<br><br>It is a test<br></code></pre></td></tr></table></figure><h3 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;OK! \c&quot; # -e 开启转义 \c 不换行<br>echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">OK! It is a test<br></code></pre></td></tr></table></figure><h3 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;It is a test&quot; &gt; myfile<br></code></pre></td></tr></table></figure><h3 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;$name\&quot;&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">name\&quot;</span><br></code></pre></td></tr></table></figure><h3 id="显示命令结果"><a href="#显示命令结果" class="headerlink" title="显示命令结果"></a>显示命令结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo `date`<br></code></pre></td></tr></table></figure><p>结果将显示当前日期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Mon Dec 16 15:45:30 UTC 2024<br></code></pre></td></tr></table></figure><h2 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a>Shell printf 命令</h2><p>Shell 的另一个输出命令 <code>printf</code>：<code>printf 命令</code>模仿 C 程序库（library）里的 <code>printf() 程序</code></p><p><code>printf</code> 由 POSIX 标准所定义，因此使用 <code>printf</code> 的脚本比使用 <code>echo</code> 移植性好</p><p><code>printf </code>使用引用文本或空格分隔的参数，外面可以在 <code>printf</code> 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等</p><p>默认的 <code>printf </code>不会像 <code>echo</code> 自动添加换行符，我们可以手动添加 <code>\n</code>，<code>printf 命令</code>的语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">printf  format-string  [arguments...]<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>format-string</code> :一个格式字符串，它包含普通文本和格式说明符</li><li><code>arguments</code>: 用于填充格式说明符的参数列表</li></ul><p>格式说明符由 <code>% 字符</code>开始，后跟一个或多个字符，用于指定输出的格式，常用的格式说明符包括：</p><ul><li><code>%s</code>：字符串</li><li><code>%d</code>：十进制整数</li><li><code>%f</code>：浮点数</li><li><code>%c</code>：字符</li><li><code>%x</code>：十六进制数</li><li><code>%o</code>：八进制数</li><li><code>%b</code>：二进制数</li><li><code>%e</code>：科学计数法表示的浮点数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">printf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg  <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234 <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 男 48.6543 <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 郭芙 女 47.9876<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">姓名     性别   体重kg<br>郭靖     男      66.12<br>杨过     男      48.65<br>郭芙     女      47.99<br></code></pre></td></tr></table></figure><p><code>%s %c %d %f</code> 都是格式替代符，<code>％s</code> 输出一个字符串，<code>％d</code> 整型输出，<code>％c</code> 输出一个字符，<code>％f</code> 输出实数，以小数形式输出</p><p><code>%-10s</code> 指一个宽度为 10 个字符（<code>-</code> 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来（）</p><p><code>%-4.2f</code> 指格式化为小数，其中 <code>.2</code> 指保留 2 位小数</p><p><code>printf</code> 的转义序列：</p><table><thead><tr><th align="left">序列</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\a</td><td align="left">警告字符，通常为ASCII的BEL字符</td></tr><tr><td align="left">\b</td><td align="left">后退</td></tr><tr><td align="left">\c</td><td align="left">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td align="left">\f</td><td align="left">换页（<code>formfeed</code>）</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\r</td><td align="left">回车（<code>Carriage return</code>）</td></tr><tr><td align="left">\t</td><td align="left">水平制表符</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符</td></tr><tr><td align="left">\</td><td align="left">一个字面上的反斜杠字符</td></tr><tr><td align="left"><code>\ddd</code></td><td align="left">表示1到3位数八进制值的字符，仅在格式字符串中有效</td></tr><tr><td align="left"><code>\0ddd</code></td><td align="left">表示1到3位的八进制值字符</td></tr></tbody></table><h2 id="Shell-test-命令"><a href="#Shell-test-命令" class="headerlink" title="Shell test 命令"></a>Shell test 命令</h2><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试</p><h3 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-eq</code></td><td align="left">等于则为真</td></tr><tr><td align="left"><code>-ne</code></td><td align="left">不等于则为真</td></tr><tr><td align="left"><code>-gt</code></td><td align="left">大于则为真</td></tr><tr><td align="left"><code>-ge</code></td><td align="left">大于等于则为真</td></tr><tr><td align="left"><code>-lt</code></td><td align="left">小于则为真</td></tr><tr><td align="left"><code>-le</code></td><td align="left">小于等于则为真</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">num1=100<br>num2=100<br>if test $[num1] -eq $[num2] # if test $num1 -eq $num2 也可以<br>then<br>    echo &#x27;两个数相等！&#x27;<br>else<br>    echo &#x27;两个数不相等！&#x27;<br>fi<br></code></pre></td></tr></table></figure><p>代码中的 <code>[]</code> 执行基本的算数运算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=5<br>b=6<br><br>result=$[a+b] # 这种写法不可以乘法，四则运算符两边可以有空格，可以把a换乘$a（b也一样）<br>echo &quot;result 为： $result&quot;<br></code></pre></td></tr></table></figure><h3 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等于则为真</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等则为真</td></tr><tr><td align="left">-z 字符串</td><td align="left">字符串的长度为零则为真</td></tr><tr><td align="left">-n 字符串</td><td align="left">字符串的长度不为零则为真</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">num1=&quot;b907&quot;<br>num2=&quot;b908&quot;<br>if test $num1 = $num2<br>then<br>    echo &#x27;两个字符串相等!&#x27;<br>else<br>    echo &#x27;两个字符串不相等!&#x27;<br>fi<br></code></pre></td></tr></table></figure><h3 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-e 文件名</td><td align="left">如果文件存在则为真</td></tr><tr><td align="left">-r 文件名</td><td align="left">如果文件存在且可读则为真</td></tr><tr><td align="left">-w 文件名</td><td align="left">如果文件存在且可写则为真</td></tr><tr><td align="left">-x 文件名</td><td align="left">如果文件存在且可执行则为真</td></tr><tr><td align="left">-s 文件名</td><td align="left">如果文件存在且至少有一个字符则为真</td></tr><tr><td align="left">-d 文件名</td><td align="left">如果文件存在且为目录则为真</td></tr><tr><td align="left">-f 文件名</td><td align="left">如果文件存在且为普通文件则为真</td></tr><tr><td align="left">-c 文件名</td><td align="left">如果文件存在且为字符型特殊文件则为真</td></tr><tr><td align="left">-b 文件名</td><td align="left">如果文件存在且为块特殊文件则为真</td></tr></tbody></table><p>另外，Shell 还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为： ! 最高， -a 次之， -o 最低</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="/2024/11/06/Linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/11/06/Linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="几个常用命令"><a href="#几个常用命令" class="headerlink" title="几个常用命令"></a>几个常用命令</h2><table><thead><tr><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>ls</td><td>list</td><td>查看当前目录下的内容</td></tr><tr><td>pwd</td><td>print work directory</td><td>查看当前所在目录</td></tr><tr><td>cd [目录名]</td><td>change directory</td><td>切换目录</td></tr><tr><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>rm [文件名]</td><td>remove</td><td>删除指定文件</td></tr><tr><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><p><strong>注意：</strong>在执行Linux命令时，提示信息如果显示为乱码，则是由于编码问题导致，只需要修改Linux的编码即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p><strong>使用技巧：</strong></p><ul><li>Tab键 自动补全</li><li>连按两次 Tab键 ，给出操作提示</li><li>使用 上下箭头 快速调出曾经使用过的命令</li><li>使用 clear命令 或者 Ctrl+l 快捷键实现清屏</li></ul><p><strong>Linux命令格式：</strong> command [-options] [parameter]，<strong>说明:</strong></p><ul><li>commanid：命令名</li><li>[-options]：选项，可用来对命令进行控制，也可以省略</li><li>[parameter]：传给命令的参数，可以是零个、一个或者多个</li><li>[] 代表可选</li><li>命令名、选项、参数之间有空格进行分隔</li></ul><h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><h3 id="显式指定目录下的内容：ls-al-dir"><a href="#显式指定目录下的内容：ls-al-dir" class="headerlink" title="显式指定目录下的内容：ls [-al] [dir]"></a>显式指定目录下的内容：ls [-al] [dir]</h3><ul><li><p>-a 显示所有文件及目录（.开头隐藏文件也会列出）</p></li><li><p>-l 除文件名称外，同时将文件型态（d表示目录，-表示文件）、权限、拥有者、文件大小等信息详细列出</p></li><li><p>ls -l 可简写为 ll</p></li></ul><h3 id="切换当前工作目录（进入指定目录）：cd-dirName"><a href="#切换当前工作目录（进入指定目录）：cd-dirName" class="headerlink" title="切换当前工作目录（进入指定目录）：cd [dirName]"></a>切换当前工作目录（进入指定目录）：cd [dirName]</h3><ul><li>~ 表示用户的home目录</li><li>. 表示目前所在的目录</li><li>.. 表示目前目录位置的上级目录（用的比较多）</li></ul><h3 id="用于显示文件内容：cat-n-fileName"><a href="#用于显示文件内容：cat-n-fileName" class="headerlink" title="用于显示文件内容：cat [-n] fileName"></a>用于显示文件内容：cat [-n] fileName</h3><ul><li>-n 由1开始对所有输出的行数编号</li><li>cat &#x2F;etc&#x2F;profile：查看&#x2F;etc目录下的profile文件内容</li></ul><h3 id="以分页的形式显示文件内容：more-fileName"><a href="#以分页的形式显示文件内容：more-fileName" class="headerlink" title="以分页的形式显示文件内容：more fileName"></a>以分页的形式显示文件内容：more fileName</h3><ul><li>回车键 向下滚动一行</li><li>空格键 向下滚动一屏</li><li>b 返回上一屏</li><li>q或者Ctrl+C 推出more</li></ul><h3 id="查看文件末尾的内容：tail-f-fileName"><a href="#查看文件末尾的内容：tail-f-fileName" class="headerlink" title="查看文件末尾的内容：tail [-f] fileName"></a>查看文件末尾的内容：tail [-f] fileName</h3><ul><li>-f 动态读取文件末尾内容并显示，通常用于日志文件的内输出</li><li>tail &#x2F;etc&#x2F;profile：显示&#x2F;etc目录下的profile文件末尾10行的内容</li><li>tail -20 &#x2F;etc&#x2F;profile：显示&#x2F;etc目录下的profile文件末尾20行的内容</li><li>tail -f &#x2F;itcast&#x2F;my.log：动态读取&#x2F;itcast目录下的my.log文件末尾内容并显示</li></ul><h3 id="创建目录：mkdir-p-dirName"><a href="#创建目录：mkdir-p-dirName" class="headerlink" title="创建目录：mkdir [-p] dirName"></a>创建目录：mkdir [-p] dirName</h3><ul><li>-p 确保目录名称存在，不存在就创建一个。通过此选项，可以实现多层目录同时创建</li><li>mkdir itcast：在当前目录下，建立一个名为itcast的子目录</li><li>mkdir -pitcast&#x2F;test：在工作目录下的itcast目录中建立一个名为test的子目录，若itcast目录不存在，则建立一个</li></ul><h3 id="删除空目录：rmdir-p-dirName"><a href="#删除空目录：rmdir-p-dirName" class="headerlink" title="删除空目录：rmdir [-p] dirName"></a>删除空目录：rmdir [-p] dirName</h3><ul><li>-p 当子目录被删除后使得父目录也为空目录的话，则一起删除</li><li>rmdir itcast 删除名为itcast的空目录</li><li>rmdir -pitcast&#x2F;test：删除itcast目录中名为test的子目录，若test目录删除后itcast目录变为空目录，则也被删除</li><li>rmdir itcast*：删除名称以itcast开始的空目录</li></ul><h3 id="删除文件或者目录：rm-rf-name"><a href="#删除文件或者目录：rm-rf-name" class="headerlink" title="删除文件或者目录：rm [-rf] name"></a>删除文件或者目录：rm [-rf] name</h3><ul><li>-r 将目录及目录中所有文件或目录逐一删除，即递归删除</li><li>-f 无需确认，直接删除</li><li>-r itcast&#x2F;：删除名为itcast的目录和目录中所有文件，删除前需确认</li></ul><h2 id="拷贝移动命令"><a href="#拷贝移动命令" class="headerlink" title="拷贝移动命令"></a>拷贝移动命令</h2><h3 id="用于复制文件或目录：cp-r-source-dest"><a href="#用于复制文件或目录：cp-r-source-dest" class="headerlink" title="用于复制文件或目录：cp [-r] source dest"></a>用于复制文件或目录：cp [-r] source dest</h3><ul><li>-r 如果复制的是目录需要，使用此选项，此时将复制该目录下的所有子目录和文件</li><li>cp hello.txt itcast&#x2F;：将hello.txt复制到itcast目录中</li><li>cp hello.txt .&#x2F;hi.txt：将hello.txt复制到当前目录，并改名为hi.txt</li><li>cp -r itcast&#x2F; .&#x2F;itheima&#x2F;：将itcast目录和目录下所有文件复制到itheima目录下</li><li>cp -r itcast&#x2F;* .&#x2F;itheima&#x2F;：</li></ul><h3 id="为文件或目录改名、或将文件或目录移动到其他位置：mv-source-dest"><a href="#为文件或目录改名、或将文件或目录移动到其他位置：mv-source-dest" class="headerlink" title="为文件或目录改名、或将文件或目录移动到其他位置：mv source dest"></a>为文件或目录改名、或将文件或目录移动到其他位置：mv source dest</h3><ul><li>mv hello.txt hi.txt：将hello.txt改名为hi.txt</li><li>mv hi.txt itheima&#x2F;：将文件hi.txt移动到itheima目录中</li><li>mv hi.txt itheima&#x2F;hello.txt：将hi.txt移动到itheima目录中，并改名为hello.txt</li><li>mv itcast&#x2F; itheima&#x2F;：如果itheima目录不存在，将itcast目录改名为itheima；如果itheima目录存在，将itcast目录移动到itheima目录中</li></ul><h2 id="打包压缩命令"><a href="#打包压缩命令" class="headerlink" title="打包压缩命令"></a>打包压缩命令</h2><h3 id="对文件进行打包、解包、压缩、解压：tar-zcxvf-fileName-包名-files-对哪些文件操作"><a href="#对文件进行打包、解包、压缩、解压：tar-zcxvf-fileName-包名-files-对哪些文件操作" class="headerlink" title="对文件进行打包、解包、压缩、解压：tar [-zcxvf] fileName(包名) [files] (对哪些文件操作)"></a>对文件进行打包、解包、压缩、解压：tar [-zcxvf] fileName(包名) [files] (对哪些文件操作)</h3><ul><li>包文件后缀为.tar表示只是完成了打包，并没有压缩</li><li>包文件后缀为.tar.gz表示打包的同时还进行了压缩</li></ul><table><thead><tr><th>选项</th><th>英文</th><th>作用</th></tr></thead><tbody><tr><td>-z</td><td>gzip</td><td>通过gzip命令处理文件，gzip可以对文件压缩或者解压</td></tr><tr><td>-c</td><td>create</td><td>创建新的包文件</td></tr><tr><td>-x</td><td>extract</td><td>实现从包文件中还原文件</td></tr><tr><td>-v</td><td>verbose</td><td>显示命令执行过程</td></tr><tr><td>-f</td><td>file</td><td>指定包文件的名称</td></tr></tbody></table><h2 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h2><h3 id="vi-fileName"><a href="#vi-fileName" class="headerlink" title="vi fileName"></a>vi fileName</h3><ul><li>vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于Windows中的记事本</li></ul><h3 id="vim-fileName"><a href="#vim-fileName" class="headerlink" title="vim fileName"></a>vim fileName</h3><ul><li><p>vim是从vi发展来的一个功能更加强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中vim更加常用</p></li><li><p>要使用vim命令，需要我们自己完成安装。可以使用下面的命令来完成安装：yum install vim</p></li><li><p>在使用vim命令编辑文件时，如果指定的文件存在，则直接打开此文件，如果指定的文件不存在，则新建文件</p></li><li><p>vim在进行文本编辑时共分为三种模式，这三种模式之间可以相互切换，在使用vim时，一定要注意我们当前所处的是哪种模式：</p><ul><li>命令模式<ul><li>命令模式下可以查看文件内容、移动光标（上下左右箭头，gg：快速将光标移动到开头，G：快速将光标移动到末尾）</li><li>通过vim命令打开文件后，默认进入命令模式</li><li>另外两种模式需要先进入命令模式，才能进入彼此</li></ul></li><li>插入模式<ul><li>插入模式下可以对文件内容进行编辑</li><li>在命令模式下，按下i，a，o中的任意一个，可以进入插入模式，进入后，下方会出现 insert 字样</li><li>在插入模式下按下ESC键，回到命令模式</li></ul></li><li>底行模式<ul><li>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</li><li>在命令模式下，按下:，&#x2F;中的任意一个，可以进入底行模式</li><li>通过&#x2F;方式进入底行模式后，可以对文件内容进行查找</li><li>通过:方式进入底行模式后，可以输入wq（保存并退出）、q!（不保存退出）、set nu（显示行号）</li></ul></li></ul></li></ul><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><h3 id="在指定目录下查找文件：find-dirName-option-fileName"><a href="#在指定目录下查找文件：find-dirName-option-fileName" class="headerlink" title="在指定目录下查找文件：find dirName -option fileName"></a>在指定目录下查找文件：find dirName -option fileName</h3><ul><li>-option一般是-name，即根据文件名称来找</li><li>find . -name “*.java”：在当前目录及其子目录下查找.java结尾文件</li><li>find &#x2F;itcast -name “*.java”：在&#x2F;itcast目录及其子目录下查找.java结尾的文件</li></ul><h3 id="从指定文件中查找指定的文本内容-grep-word-fileName"><a href="#从指定文件中查找指定的文本内容-grep-word-fileName" class="headerlink" title="从指定文件中查找指定的文本内容 grep word fileName"></a>从指定文件中查找指定的文本内容 grep word fileName</h3><ul><li>grep Hello Helloworld.java：查找HelloWorld.java文件中出现的Hello字符串的位置</li><li>grep hello *.java：查找当前目录中所有.java结尾的文件中包含hello字符串的位置</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
